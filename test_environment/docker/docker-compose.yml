version: '3'
services:
  # Docker service to bundle the addon with dependencies
  bundle-addon:
    image: python:3.9-slim  # Use a lightweight Python image with pip preinstalled
    volumes:
      - ../../addon:/addon  # Mount unbundled addon to /addon_unbundled
    working_dir: /addon  # Set working directory to the unbundled addon folder
    command: sh -c "
      python bundle_addon.py && 
      cp -r /addon/. /addon/ &&  
      echo 'Addon bundled and copied successfully'"
    profiles:
      - bundle

  # Docker service to copy the bundled addon and anki_config into the Anki container
  copy-anki-config:
    image: alpine:latest
    volumes:
      - ../anki_config:/anki_config  # Relative path to anki_config
      - ../../addon:/addon  # Shared volume for the bundled addon
      - docker_volume_Anki2:/Anki2
    command: sh -c "
      cp -r /anki_config/* /Anki2/ && 
      cp -r /addon/. /Anki2/addons21/notes2flash_addon/ && 
      chown -R 1000:1000 /Anki2 &&
      echo 'Files copied successfully'"
    profiles:
      - run 

  # Docker service to run Anki for development
  anki-desktop:
    build:
      context: .  # Set the build context to the current directory
      dockerfile: Dockerfile.anki
    volumes:
      - docker_volume_Anki2:/config/app/Anki2
      - ../anki_backups:/config/app/backups  # Relative path to anki_backups
    ports:
      - 3000:3000
      - 8765:8765
    depends_on:
      - copy-anki-config  # Start Anki only after config and addon are copied
    profiles:
      - run 

volumes:
  docker_volume_Anki2:
